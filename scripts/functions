# $Id$	--*- sh -*--

# Copyright (C) 2003,2004,2005,2006 Enrico Scholz <enrico.scholz@informatik.tu-chemnitz.de>
#  
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#  
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#  
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

_VS_LOGFILE=
_VS_ERRFILE=

_VS_NEWLINE='
'
declare -r _VS_NEWLINE=${_VS_NEWLINE:0-1}

function findObject
{
    local _fo_mod=$1
    local _fo_var=$2
    local _fo_file=
    local _fo_i=X
    shift 2
    
    for _fo_i; do
	test -n "$_fo_i"         || continue
	test ! $_fo_mod "$_fo_i" || { _fo_file=$_fo_i; break; }
    done

    test -z "$_fo_i" -o -n "$_fo_file" || {
	echo "Can not find file for '$_fo_var'; aborting"
	exit 1
    } >&2

    eval "$_fo_var=\"$_fo_file\""
}

function findFile
{
    findObject -f "$@"
}

function findDir
{
    findObject -d "$@"
}

function findAndCopy
{
    local dst=$1
    test ! -s "$dst"         || return 0
    
    local tmp
    shift
    findFile tmp "$@"

    test -n "$tmp" -a -s "$tmp" || return 0
    $_CP -af "$tmp" "$dst"
}

## Usage: isRegularFile <filename> [<mod>]
function isRegularFile
{
    test ${2:--f} "$1" || return 1

    case $1 in
	(*.rpmsave|*.rpmnew|*.rpmorig|*.cfsaved*|*.~*~|*~)	return 1;;
    esac

    return 0
}

function getPhysicalDir
{
    ( set -P && cd "$1" && pwd )
}

## Usage:: isDirectoryEmpty <dir> [<ignore-lost+found>]
function isDirectoryEmpty
{
    (
	shopt -s dotglob  || *
	shopt -s nullglob || *

	ignore_lostfound=1
	test -n "$2" -a "$2" != 0 || ignore_lostfound=

	for i in "$1"/*; do
	    case "$i" in
		($1/lost+found)
		    test "$ignore_lostfound" || exit 1
		    ;;
		(*)	echo "$i"; exit 1
	    esac
        done

	exit 0
    )
}

## Usage: logging <message>
function logging
{
    if test -n "$_VS_LOGFILE"; then
	echo "$@" >>"$_VS_LOGFILE"
    else
	echo "$@"
    fi
}

## Usage: warning <message>
function warning
{
    if test -n "$_VS_ERRFILE"; then
	echo "$@" >>"$_VS_ERRFILE"
    else
	echo "$@" >&2
    fi
}

## Usage: panic <message>
function panic
{
    if test -n "$_VS_ERRFILE"; then
	echo "$@" >>"$_VS_ERRFILE"
    else
	echo "$@" >&2
    fi

    exit 1
}

## Usage: execute <message>
function execute
{
    test -z "${DEBUG_EXEC:-}"       || echo "$@"
    test "${DEBUG_EXEC:-}" = noexec || exec "$@"
    exit 0
}


## Usage: spawn <message>
function spawn
{
    test -z "${DEBUG_EXEC:-}"       || echo  "$@"
    test "${DEBUG_EXEC:-}" = noexec || "$@"
}

## Usage: isNumber <arg>
function isNumber
{
    local tmp
    let tmp=$1+0 2>/dev/null || test -z "${1//0/}" -a -n "$1" || return 1
    return 0
}

## Usage: hasSubstring <haystack> <needle>+
function hasSubstring
{
    local pat=$1
    local i
    
    shift

    for i; do
	test x"${pat/*$i*/$i}" = x"$i" || continue
	return 0
    done

    return 1
}

## Usage: colorize <style> <command>
function colorize
{
    local	style=$1
    shift
    
    if ! $_TTY -s; then
	"$@"
    else
	local	cfile
	findFile cfile "$__CONFDIR"/.defaults/styles/"$style" ''
	if test -n "$cfile"; then
	  $_CAT "$cfile"
	else
	  case "$style" in
	    (bold)	echo -ne "\e[1m";;
	    (emph)	echo -ne "\e[34m";;
	    (info)	echo -ne "\e[0;34m";;
	    (warn*)	echo -ne "\e[1;31m";;
	    (error)	echo -ne "\e[1;33;41m";;
	    (*)		;;
	  esac
	fi
	    
	( "$@" )
	echo -ne "\e[m"
    fi
}

function colpanic
{
    if test -n "$_VS_ERRFILE"; then
	echo "$@" >>"$_VS_ERRFILE"
    else
	colorize error echo -n "$@" >&2
    fi
    echo

    exit 1
}

function colwarning
{
    colorize warning warning "$@"
}

function colinfo
{
    colorize info    echo "$@"
}


## Usage: xtermTitle <title>
function xtermTitle
{
    $_TTY -s || return 0
    echo -ne "\e]0;$@\007"
}

_VS_LOCKS=''
## Usage: lock <lockfile> [<timeout>]
function lock
{
    local tmp=$($_MKTEMP vserver-lock.XXXXXX)
    $_RM -f $tmp
    $_MKFIFO -m600 $tmp

    $_LOCKFILE "$1" $tmp $2 &
    $_GREP -q true $tmp 2>/dev/null || return 1
    
    _VS_LOCKS="$! $_VS_LOCKS"
}

## Usage: unlock [<num>]
function unlock
{
    local num=$1
    local i

    set -- $_VS_LOCKS
    while test "$#" -gt 0; do
	kill -HUP "$1" >/dev/null || :
	shift
	test "$num" != 1 || break
	test -z "$num"   || let --num
    done
    _VS_LOCKS="$@"
}

function get_init_cwd
{
    if test -n "$INIT_CWD"; then
	echo "$INIT_CWD"
    else
	pwd
    fi
}
function set_init_cwd
{
    INIT_CWD="`pwd`"
    export INIT_CWD
}

function _setVserverDir
{
    local vserver="$1"
    case "$vserver" in
	./*) VSERVER_DIR="`get_init_cwd`/$vserver";;
	/*)  VSERVER_DIR="$vserver"               ;;
	*)   VSERVER_DIR="$__CONFDIR/$vserver"    ;;
    esac
}

function _setVserverName
{
    VSERVER_NAME=$(basename "$VSERVER_DIR")
}

function _pkgMountBindDir()
{
    test "$1" != "$2" || return 0

    $_MOUNT -n --bind "$1" "$2"
}

function _pkgSetVarsBase
{
    case "$vserver" in
	./*|/*)
	    if test -d "$vserver/vdir"; then
		BASEDIR=$vserver
		VDIR=$(getPhysicalDir "$vserver/vdir")

		PKGDIR=$BASEDIR/apps/pkgmgmt
		test -d "$PKGDIR" || {
		    echo "Can not find configuration-directory for package-managment tools"
		    exit 1
		} >&2
		findDir EXECDIR      $PKGDIR/execdir     /
	    else
		VDIR=$(getPhysicalDir "$vserver")
		PKGDIR=
	    fi
	    ;;
        *)
    	    BASEDIR=$__CONFDIR/$vserver
    	    test -d "$BASEDIR" || {
    	        echo "Can not find configuration-directory"
    	        exit 1
    	    } >&2
    	    
    	    VDIR=$BASEDIR/vdir
    	    test -d "$VDIR"   || VDIR=$__DEFAULT_VSERVERDIR/$vserver
	    VDIR=$(getPhysicalDir "$VDIR")
    	    
    	    PKGDIR=$BASEDIR/apps/pkgmgmt
    	    test -d "$PKGDIR" || {
    	        echo "Can not find configuration-directory for package-managment tools"
    	        exit 1
    	    } >&2

	    findDir EXECDIR      $PKGDIR/execdir     /

	    ;;
    esac

    if test -z "$WORKAROUND_106057"; then
	_rpmdb_mntpoint=/dev
    else
	_rpmdb_mntpoint=/.rpmdb
    fi
}

function _pkgSetVarsRPM
{
    if test -n "$PKGDIR"; then
	findDir RPMETCDIR    $PKGDIR/rpmetc        $PKGDIR/base/rpm/etc   \
			     $PKGDIR/base/etc/rpm  /etc/rpm
	findDir RPMSTATEDIR  $PKGDIR/rpmstate      $PKGDIR/base/rpm/state \
			     $PKGDIR/base/var/lib/rpm

	findDir RPMLIBDIR    $PKGDIR/rpmlib	 /

    else
	findDir RPMETCDIR    "$VDIR"/etc/rpm     /etc/rpm
	findDir RPMSTATEDIR  "$VDIR"/var/lib/rpm
	RPMLIBDIR=/
    fi
    
    RPMSTATEDIR=$(getPhysicalDir "$RPMSTATEDIR")
    RPMETCDIR=$(getPhysicalDir "$RPMETCDIR")
}

function _pkgSetVarsApt
{
    if test -n "$PKGDIR"; then
	findDir APTETCDIR    $PKGDIR/aptetc      $PKGDIR/base/apt/etc       /etc/apt
	findDir APTSTATEDIR  $PKGDIR/aptstate    $PKGDIR/base/apt/state
	findDir APTCACHEDIR  $PKGDIR/aptcache    $PKGDIR/base/apt/cache
	findDir APTARCHIVDIR $PKGDIR/aptarchives $PKGDIR/base/apt/archives  /var/cache/apt/archives
    else
	findDir APTETCDIR    "$VDIR"/etc/apt       	/etc/apt
	findDir APTSTATEDIR  "$VDIR"/var/state/apt
	findDir APTCACHEDIR  "$VDIR"/var/cache/apt
	findDir APTARCHIVDIR "$VDIR"/var/cache/apt/archives /var/cache/apt/archives
    fi

    findFile APT_CONFIG "$APTETCDIR"/apt.conf ""
    test -z "$APT_CONFIG" || export APT_CONFIG
}

function _pkgSetVarsYum
{
    if test -n "$PKGDIR"; then
	findDir YUMETCDIR    $PKGDIR/yumetc      $PKGDIR/base/yum/etc       /etc
	findDir YUMCACHEDIR  $PKGDIR/yumcache    $PKGDIR/base/yum/cache
    else
	findDir YUMETCDIR    "$VDIR"/etc       	 /etc
	findDir YUMCACHEDIR  "$VDIR"/var/cache/yum
    fi
}

function _pkgSetVarsUrpmi
{
    if test -n "$PKGDIR"; then
	findDir URPMIETCDIR    $PKGDIR/urpmietc    $PKGDIR/base/etc/urpmi       /etc/urpmi
	findDir URPMISTATEDIR  $PKGDIR/urpmistate  $PKGDIR/base/var/lib/urpmi
    else
	findDir URPMIETCDIR    "$VDIR"/etc/urpmi     /etc/urpmi
	findDir URPMISTATEDIR  "$VDIR"/var/lib/urpmi /var/lib/urpmi
    fi
}

function _pkgSetVarsPoldek
{
    if test -n "$PKGDIR"; then
	findDir POLDEKETCDIR    $PKGDIR/poldeketc      $PKGDIR/base/poldek/etc       /etc/poldek
	findDir POLDEKCACHEDIR  $PKGDIR/poldek-cache   $PKGDIR/base/poldek/cache
    else
	findDir POLDEKETCDIR    "$VDIR"/etc/poldek	/etc/poldek
	findDir POLDEKCACHEDIR  "$VDIR"/var/tmp/poldek-cache
    fi

    findFile POLDEK_CONFIG "$POLDEKETCDIR"/poldek.conf ""
    test -z "$POLDEK_CONFIG" || export POLDEK_CONFIG
}


function _pkgMountBase
{
    :
}

function _pkgMountApt
{
    :
}

function _pkgMountYum
{
    :
}

function _pkgMountUrpmi
{
    _pkgMountBindDir "$RPMSTATEDIR" "$URPMISTATEDIR/../../../.rpmdb"
}

function _pkgMountRPM
{
    _pkgMountBindDir "$RPMETCDIR" /etc/rpm
    test "$RPMLIBDIR" = "/" || _pkgMountBindDir "$RPMLIBDIR" /usr/lib/rpm

    pushd "$VDIR" >/dev/null

    $_SECURE_MOUNT --chroot -n --bind "$RPMSTATEDIR" "$_rpmdb_mntpoint"
    test -z "$WORKAROUND_106057" || mount -n --bind "$RPMSTATEDIR" "$_rpmdb_mntpoint"

    test -e "$VDIR"/proc/self/status || \
	$_SECURE_MOUNT --chroot -n -t proc none /proc

    popd >/dev/null
}

function _pkgSetEnvBase
{
    test "$EXECDIR" = "/" || {
	PATH=$EXECDIR:$PATH
	LD_LIBRARY_PATH=$EXECDIR${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
    }

    export PATH LD_LIBRARY_PATH
}

function _pkgSetEnvApt
{
    :
}

function _pkgSetEnvYum
{
    :
}

function _pkgSetEnvUrpmi
{
    :
}

function _pkgSetEnvRPM
{
    CUR_VSERVER=$vserver
    RPM_FAKE_NAMESPACE_MOUNTS=$_rpmdb_mntpoint
    RPM_BINARY=$_VRPM_PRELOAD

    export CUR_VSERVER RPM_FAKE_NAMESPACE_MOUNTS RPM_BINARY
}

function pkgInit
{
    local i
    local vserver=$1
    shift
    
    _pkgSetVarsBase
    for i; do
	case "$i" in
	    rpm)	_pkgSetVarsRPM;;
	    apt)	_pkgSetVarsApt;;
	    yum)	_pkgSetVarsYum;;
	    urpmi)	_pkgSetVarsUrpmi;;
	    poldek)	_pkgSetVarsPoldek;;
	    *)		echo "Unknown packaging flavor" >&2; exit 1;;
	esac
    done

    _pkgMountBase
    for i; do
	case "$i" in
	    rpm)	_pkgMountRPM;;
	    apt)	_pkgMountApt;;
	    yum)	_pkgMountYum;;
	    urpmi)	_pkgMountUrpmi;;
	esac
    done

    _pkgSetEnvBase
    for i; do
	case "$i" in
	    rpm)	_pkgSetEnvRPM;;
	    apt)	_pkgSetEnvApt;;
	    yum)	_pkgSetEnvYum;;
	    urpmi)	_pkgSetEnvUrpmi;;
	esac
    done

    _PKG_FLAVORS="$@"
    _PKG_VSERVER=$vserver
}

function isAvoidNamespace
{
    local cfgdir

    $_VSERVER_INFO - FEATURE namespace   || return 0
    cfgdir=$($_VSERVER_INFO "$1" CFGDIR) || return 0
    test ! -e "$cfgdir"/namespace        || return 1
    test -e "$__CONFDIR"/.defaults/nonamespace -o \
         -e "$cfgdir"/nonamespace
}

function isNamespaceCleanup
{
    local cfgdir

    $_VSERVER_INFO - FEATURE namespace   || return 1
    cfgdir=$($_VSERVER_INFO "$1" CFGDIR) || return 1
    isAvoidNamespace "$1"                && return 1
    test -e "$cfgdir"/namespace-cleanup  && return 0
    test -e "$cfgdir"/nonamespace-cleanup -o \
         -e "$__CONFDIR"/.defaults/nonamespace-cleanup && return 1
    return 0
}

## Usage: mountTriggerAutomount <cfgdir>
function mountTriggerAutomount
{
    local cfgdir=$1
    local vdir=$1/vdir
    local f
    local r=0

    for f in fstab fstab.local fstab.remote; do
	local fstab=$cfgdir/$f
	test -e "$fstab" || continue

	pushd "$vdir" >/dev/null
	$_SECURE_MOUNT --trigger-automount -a --fstab "$fstab" || rc=1
	popd >/dev/null
    done

    return $rc
}

## Usage: getAllVservers <var> [<KIND>*]
function getAllVservers
{
    local _ga_i
    declare -a _ga_tmp=()
    local _ga_IFS="$IFS"
    IFS=,
    local -a _ga_marks=( $3 )
    IFS="$_ga_IFS"

    for _ga_i in $__CONFDIR/*; do
	isRegularFile "$_ga_i" -d   || continue

	test ! -e "$_ga_i"/disabled || continue
	test   -d "$_ga_i"/vdir     || continue

	local _ga_doadd=1
	local _ga_markfile=$_ga_i/apps/init/mark

	case ${2:-ALL} in
	    (MARKED)	test   -s "$_ga_markfile" || _ga_doadd=;;
	    (UNMARKED)	test ! -s "$_ga_markfile" || _ga_doadd=;;
	    (STOPPED)   ! $_VSERVER "$_ga_i" running &>/dev/null || _ga_doadd=;;
	    (RUNNING)     $_VSERVER "$_ga_i" running &>/dev/null || _ga_doadd=;;
	    (ALL)	;;
	    (MARK)	local _ga_j
			local _ga_mark
			local _ga_f=false
			local _ga_invert=false
			for _ga_j in "${_ga_marks[@]}"; do
			    _ga_mark="$(echo "$_ga_j" | $_SED 's/^[!~]//')"
			    test "$_ga_j" = "$_ga_mark" || _ga_invert=true
			    test -s "$_ga_markfile" && $_GREP -qx "$_ga_mark" "$_ga_markfile" && \
				_ga_f=true || :
			done
			test $_ga_f = $_ga_invert && \
			    _ga_doadd=
			;;
	    (*)		panic $"Unknown vserver tagging '$2'";;
	esac

	test -z "$_ga_doadd" || _ga_tmp=( "${_ga_tmp[@]}" "${_ga_i##$__CONFDIR/}")
    done

    eval $1='( "${_ga_tmp[@]}" )'
}

declare -r VS_ALLVSERVERS_ARGS=all,marked,unmarked,stopped,running,mark:
## Usage: getAllVserversByArg <var> <arg>
function getAllVserversByArg
{
    local _gav_mark=
    local _gav_v="$1"
    local _gav_first=1
    local _gav_res=()
    shift

    while test "$#" -ge 1; do
	local _gav_extra=
        local _gav_tmp=()

	case "$1" in
	    (--all)		_gav_mark=ALL;;
	    (--marked)		_gav_mark=MARKED;;
	    (--unmarked)	_gav_mark=UNMARKED;;
	    (--stopped)		_gav_mark=STOPPED;;
	    (--running)		_gav_mark=RUNNING;;
	    (--mark*)		_gav_mark=MARK
				_gav_extra=${_gav_i##*=}
				test -n "$_gav_extra" -a "$_gav_extra" != "--mark" || \
				    _gav_extra="$2"
				shift
				;;
	    (--)		break;;
	    (*)			set -- "$_gav_v" "$@"
				return 1;;
	esac

	getAllVservers _gav_tmp "$_gav_mark" $_gav_extra
	if test -n "$_gav_first"; then
	    _gav_res=( "${_gav_tmp[@]}" )
	else
	    local _gav_i=0
	    local _gav_n="${#_gav_res[@]}"
	    while test $_gav_i -lt $_gav_n; do
		local _gav_found=0
		for _gav_j in "${_gav_tmp[@]}"; do
		    if test "$_gav_j" = "${_gav_res[$_gav_i]}"; then
			_gav_found=1
			break
		    fi
		done
		if test "$_gav_found" = 0; then
		    unset _gav_res[$_gav_i]
		fi
		let ++_gav_i
	    done
	    _gav_res=( "${_gav_res[@]}" )
	fi
	shift
	_gav_first=
    done
    eval $_gav_v='( "${_gav_res[@]}" )'
}

## Usage: _getProcNumberCount <ctx> <var>
function _getProcNumberCount
{
    local _gp_var=$2
    local _gp_procnr_cnt=0

    # Use /proc/virtual from kernel 2.6 when possible
    if test -d "/proc/virtual"; then
	set -- $($_GREP '^Tasks:' "/proc/virtual/$1/status" 2>/dev/null)
	_gp_procnr_cnt=$2
    else
	_gp_procnr_cnt=$($_VPS ax | $_AWK '{print $2}' | $_GREP -x "$1" | $_WC -l )
    fi

    let _gp_procnr_cnt=_gp_procnr_cnt+0
    eval $_gp_var=\$_gp_procnr_cnt
}

## Usage: getVserverCtx <vdir> <result-varname> [<procnumber-varname> [<do-cleanup>]]
## Returns: 0 iff vserver is running
function getVserverStatus
{
    test -r "$1"/run || return 1

    local _gvs_ctx
    read _gvs_ctx <"$1"/run
    eval "$2"=\$_gvs_ctx

    if test "$1" = "$($_VUNAME -g --xid "$_gvs_ctx" context)"; then
	test -n "$3" || return 0
	local _gvs_tmp
	_getProcNumberCount "$_gvs_ctx" _gvs_tmp
	eval "$3"=\$_gvs_tmp
    else
	test -n "$3" || return 1
	eval "$3"=0
	_gvs_tmp=0
    fi

    if test "$_gvs_tmp" = 0; then
	local runfile=$($_READLINK "$1/run")
	test -z "$4" || $_RM -f "$runfile"
	return 1
    fi

    return 0
}

## Usage: isCtxRunning <ctx>
function isCtxRunning
{
    local _tmp
    _getProcNumberCount "$1" _tmp
    test $_tmp -gt 0
}

## Usage: isVserverRunning <vdir> [<ctx-varname>]
function isVserverRunning
{
    local _ivr_ctx _ivr_procnum

    getVserverStatus "$1" _ivr_ctx _ivr_procnum 1 || return 1
    test "$_ivr_procnum" != 0                     || return 1
    test -z "$2" || eval "$2"=\$_ivr_ctx
    return 0
}

## Called as 'getFileValue <varname> <filename>+'
function getFileValue
{
    local _gfv_var=$1
    local _gfv_file
    shift

    findFile _gfv_file "$@" ''
    test -n "$_gfv_file" -a -r "$_gfv_file" || return 0
    eval read "$_gfv_var" <"$_gfv_file"
}

## Called as 'getFileArray <varname> <filename>+'
function getFileArray
{
    local _gfa_var=$1
    local _gfa_file
    shift

    findFile _gfa_file "$@" ''
    test -n "$_gfa_file" -a -r "$_gfa_file" || return 0
    local IFS=$_VS_NEWLINE
    eval "$_gfa_var"='( $(< "$_gfa_file") )'
}

function checkComponents
{
    local	i
    local	msg=$1
    local	x_failed=

    shift
    
    for i; do
	local failed=
	case "$i" in
	    (core)	test -x "$_CHBIND"           || failed=1;;
	    (build)	test -x "$_VSERVER_BUILD"    || failed=1;;
	    (sysv)	test -x "$__INITRDDIR/vserver"    || failed=1;;
	    (devel)	test -d "$__INCLUDEDIR/vserver.h" || failed=1;;
	    (*)		echo "Unknown component '$i'" >&2
			return false
			;;
	esac

	test -z "$failed" || {
	    echo "$msg: $i"
	    x_failed=1
	} >&2
    done

    test -z "$x_failed"
}

## Usage: isKernelAPI <ver> [<cmp-modifier>]
function isKernelAPI
{
    local api
    api=$($_VSERVER_INFO - APIVER) || api=0
    test $[ $api ] -${2:-ge} $[ $1 ]
}

## Usage: callInNamespace <vserver> <command> <args>*
function callInNamespace
{
    local ctx=
    
    isAvoidNamespace "$1" || \
    ctx=$( $_VSERVER_INFO "$1" CONTEXT f ) || ctx=

    shift
    if test -n "$ctx"; then
	$_VSPACE "${OPTS_VSPACE[@]}" --mount --fs --enter "$ctx" -- "$@"
    else
	"$@"
    fi
}

## Usage: setDefaultTTY <vdir> [<fallback-tty>]
function setDefaultTTY
{
    local cfgdir ttyname

    cfgdir=$($_VSERVER_INFO "$1" APPDIR init) || cfgdir=
    findObject -e ttyname \
	${cfgdir:+"$cfgdir"/tty} \
	"$__CONFDIR/.defaults/apps/init/tty" \
	$2 /dev/null

    if test -f "$ttyname"; then
	exec </dev/null
    else
	exec <$ttyname
    fi
    exec    >>$ttyname 2>&1
}

## Usage: killContext <XID> [<SIG>]
function killContext
{
    local sig=${2:-9}

    #$_VKILL -s STOP   --xid "$1" 1 &>/dev/null || :
    $_VKILL -s "$sig" --xid "$1" 1 &>/dev/null || :
    $_VKILL -s "$sig" --xid "$1"   &>/dev/null || :
    #$_VKILL -s "$sig" --xid "$1" 1 &>/dev/null || :
    #$_VKILL -s CONT   --xid "$1" 1 &>/dev/null || :
}

function useVlogin
{
    test ! -e "$__CONFDIR/.defaults/apps/vlogin/disable"
}

## Usage: pkgmgmt.guessStyle <vserver> <resultvar>
function pkgmgmt.guessStyle()
{
    local _pgs_vdir
    _pgs_vdir=$($_VSERVER_INFO "$1" VDIR) || {
	echo $"Can not determine vserver-root" >&2
	return 1
    }
    local _pgs_cfgdir=$($_VSERVER_INFO "$1" APPDIR pkgmgmt) || :

    if test -n "$_pgs_cfgdir" -a -e "$_pgs_cfgdir"/style; then
	read style <"$_pgs_cfgdir"/style
    elif test -e "$_pgs_vdir"/etc/redhat-release -o -e "$_pgs_vdir"/etc/fedora-release; then
	style=redhat
    elif test -e "$_pgs_vdir"/etc/mandrake-release; then
	style=mandrake
    elif test -e "$_pgs_vdir"/etc/pld-release; then
	style=pld
    elif test -e "$_pgs_vdir"/etc/debian_version; then
	style=debian
    elif test -e "$_pgs_vdir"/etc/SuSE-release; then
	style=suse
    else
	echo $"Can not determine packagemanagement style" >&2
	return 1
    fi

    eval $2=\$style
    return 0
}

## Usage: pkgmgmt.isInternal <vserver>
## returns true iff <vserver> is configured for internal packagemanagement
## A typical application is
## | is_external=
## | pkgmgmt.isInternal "$vserver" || is_external=1
function pkgmgmt.isInternal
{
    local cfgdir=$($_VSERVER_INFO "$1" APPDIR pkgmgmt) || :

    test -z "$cfgdir" -o ! -d "$cfgdir" -o -e "$cfgdir"/internal
}

## Usage: pkgmgmt.isAptAvailable <cfgdir> <vdir> [<is-internal>]
function pkgmgmt.isAptAvailable
{
    local cfgdir="$1"
    local vdir="$2"
    local is_internal="$3"
    
    local have_apt i
    if test -n "$is_internal"; then
	have_apt=1
	test -d "$cfgdir"/base/apt -o -d "$cfgdir"/aptetc || have_apt=
    else
	have_apt=
	for i in /bin /usr/bin /usr/local/bin; do
	    test ! -x "$vdir$i"/apt-get || { have_apt=1; break; }
	done
    fi

    test -n "$have_apt" && return 0 || return 1
}

## Usage: pkgmgmt.isYumAvailable <cfgdir> <vdir> [<is-internal>]
function pkgmgmt.isYumAvailable
{
    local cfgdir="$1"
    local vdir="$2"
    local is_internal="$3"
    
    local have_yum i
    if test -n "$is_internal"; then
	have_yum=1
	test -d "$cfgdir"/base/yum -o -d "$cfgdir"/yumetc || have_yum=
    else
	have_yum=
	for i in /bin /usr/bin /usr/local/bin; do
	    test ! -x "$vdir$i"/yum || { have_yum=1; break; }
	done
    fi

    test -n "$have_yum" && return 0 || return 1
}

## Usage: pkgmgmt.isUrpmiAvailable <cfgdir> <vdir> [<is-internal>]
function pkgmgmt.isUrpmiAvailable
{
    local cfgdir="$1"
    local vdir="$2"
    local is_internal="$3"
    
    local have_urpmi i
    if test -n "$is_internal"; then
	have_urpmi=1
	test -d "$cfgdir"/base/var/lib/urpmi || have_urpmi=
    else
	have_urpmi=
	for i in /bin /usr/bin /usr/local/bin; do
	    test ! -x "$vdir$i"/urpmi || { have_urpmi=1; break; }
	done
    fi

    test -n "$have_urpmi" && return 0 || return 1
}

## Usage: pkgmgmt.isPoldekAvailable <cfgdir> <vdir> [<is-internal>]
function pkgmgmt.isPoldekAvailable
{
    local cfgdir="$1"
    local vdir="$2"
    local is_internal="$3"
    
    local have_poldek i
    if test -n "$is_internal"; then
	have_poldek=1
	test -d "$cfgdir"/base/poldek -o -d "$cfgdir"/poldeketc || have_poldek=
    else
	have_poldek=
	for i in /bin /usr/bin /usr/local/bin; do
	    test ! -x "$vdir$i"/poldek || { have_poldek=1; break; }
	done
    fi

    test -n "$have_poldek" && return 0 || return 1
}


function vshelper.doSanityCheck
{
    local vshelper this_xid i
    declare -a warnings=()
    local solution_disable=
    local solution_sysctl=

    vshelper.isEnabled && vshelper.isEnabled warning || return 0
    
    this_xid=$($_VSERVER_INFO - XID) ||
	panic $"Failed to determine current context; aborting..."

    ## Do nothing in other xid's; the helper will be executed in xid 0 only
    test "$this_xid" = 0 || return 0

    local proc_file=/proc/sys/kernel/vshelper

    if ! test -r "$proc_file"; then
	vshelper=
	warnings=( "${warnings[@]}"
		   $"File '$proc_file' does not exist but is required for vshelper setup" )
        solution_disable=1
    else
	vshelper=$(cat "$proc_file")

	$_CMP -s "$vshelper" "$_VSHELPER" || {
	    local readable=""
	    test -r "$vshelper" && readable=1
	    warnings=( "${warnings[@]}"
		       $"The configured vshelper '$vshelper' does not match the 'vshelper'
  script of the util-vserver package.${readable:+ Maybe you have two versions installed?}"
		     )
	    solution_disable=1
	    solution_sysctl=1
	}
    fi

    test -d "$__VSHELPERSTATEDIR" || {
	warnings=( "${warnings[@]}"
		   $"\
The vshelper state-directory '$__VSHELPERSTATEDIR' does not exist; since
it is created by 'make install', this indicates a serious problem with
your util-vserver installation" )
	solution_disable=1
    }

    test "${#warnings[@]}" -eq 0 || {
	warning $"\
The following problem(s) were encountered while verifying vshelper
functionality:"

	for i in "${warnings[@]}"; do
	    warning "* $i"
	done

	warning $"\

To fix this, you can:"

	test -z "$solution_disable" || warning $"\
* disable vshelper entirely by executing
  | touch \"$__CONFDIR/.defaults/apps/vshelper/disabled\"
* disable only this message by executing
  | touch \"$__CONFDIR/.defaults/apps/vshelper/warning-disabled\""

	test -x "$solution_sysctl" || warning $"\
* configure the util-vserver vshelper script, e.g. by adding
  | kernel.vshelper = $_VSHELPER
  to /etc/sysctl.conf and rebooting the machine, or by executing
  | echo \"$_VSHELPER\" >$proc_file"

	warning ""

	return 1
    }

    return 0
}

## Usage: vshelper.isEnabled [<style>] [<vserver>]
function vshelper.isEnabled
{
    local f=${1:+$1-}disabled
    test ! -e "$__CONFDIR"/.defaults/apps/vshelper/"$f"     || return 1
    $_VSERVER_INFO - FEATURE vshelper                       || return 1
    if test -n "$2"; then
	local appdir
	appdir=$($_VSERVER_INFO "$2" APPDIR vshelper)       || return 0
	test -z "$2" -o ! -e "$appdir/$f"                   || return 1
    fi

    return 0
}

## Usage: vshelper.isDebug [<vserver>]
function vshelper.isDebug
{
    test ! -e "$__CONFDIR"/.defaults/apps/vshelper/debug    || return 0
    $_VSERVER_INFO - FEATURE vshelper                       || return 1
    if test -n "$1"; then
	local appdir
	appdir=$($_VSERVER_INFO "$1" APPDIR vshelper)       || return 1
	test ! -e "$appdir/debug"                           || return 0
    fi

    return 1
}

function vshelper._getHandlerInternal
{
    local _vghi_var=$1
    local _vghi_tmp
    shift
    shift	## HACK: see below the note about the 'set -u' mode
    
    while test "$#" -ge 2; do
	local _vghi_mod=$1
	local _vghi_obj=$2
	shift 2

	test "$_vghi_mod" "$_vghi_obj" || continue
	case "$_vghi_mod" in
	    (-x)
		eval $_vghi_var=\$_vghi_obj
		;;
	    (-e)
		read _vghi_tmp <"$_vghi_obj"
		eval $_vghi_var=:\$_vghi_tmp
		;;
	    (*)	panic $"Internal error, unexpected modifier '$_vghi_mod'"
	esac
	return 0
    done
    
    return 1
}

## Usage: vshelper.getHandler <result-var> <vserver> <action>
function vshelper.getHandler
{
    local _vgh_appdir
    _vgh_appdir=$($_VSERVER_INFO "$2" APPDIR vshelper) || _vgh_appdir=

    declare -a _vgh_search_list=( X )
    ## HACK: when we are in 'set -u' mode, empty lists are causing errors

    test -z "$_vgh_appdir" || _vgh_search_list=( "${_vgh_search_list[@]}" -x "$_vgh_appdir/$3" )
    test -z "$_vgh_appdir" || _vgh_search_list=( "${_vgh_search_list[@]}" -e "$_vgh_appdir/action" )
    _vgh_search_list=( "${_vgh_search_list[@]}" -x "$__CONFDIR"/.defaults/apps/vshelper/"$3" )
    _vgh_search_list=( "${_vgh_search_list[@]}" -e "$__CONFDIR"/.defaults/apps/vshelper/action )

    ! vshelper._getHandlerInternal "$1" "${_vgh_search_list[@]}" || return 0
    eval $1=':restart'
}

## Usage: vshelper.init <vserver> [<method> <args>*]
function vshelper.doInit
{
    vshelper.isEnabled || return 0
    
    local xid
    xid=$($_VSERVER_INFO "$1" CONTEXT false) && test -n "$xid" || {
	warning $"vshelper.init: can not determine xid of vserver '$vserver'; returned value was '$xid'

This usually means that you're using an init-less init-style, but the
guest isn't configured to start any service. Try enabling a service,
changing the init-style, or making the contexts persistent."
	return 1
    }

    local f="$__VSHELPERSTATEDIR/$xid"
    
    set -C
    $_RM -f "$f"
    echo "$1" >"$f"
    set +C
    
    if test -n "$2"; then
	shift 1
	local i
	for i; do
	    echo "$i" 
	done
    else
	echo "default"
    fi >>"$f"

    return 0
}

## Usage: vshelper.doDestroy <vserver> <xid>
function vshelper.doDestroy
{
    vshelper.isEnabled || return 0

    $_RM -f "$__VSHELPERSTATEDIR/$2"
}

## Usage: vshelper.initSync <vserver> <pipe-varname> [<method>]
function vshelper.initSync
{
    local _vis_tmpdir
    _vis_tmpdir=$($_MKTEMPDIR vserver-stop.XXXXXX) || {
	warning $"Failed to generate temporary directory for vshelper sync"
	return 1
    }

    local _vis_fifo="$_vis_tmpdir"/pipe
    $_MKFIFO -m700 "$_vis_fifo"
    vshelper.doInit "$1" "${3:-sync}" "$_vis_fifo"
    eval $2=\$_vis_fifo
}

## Usage: vshelper.getSyncTimeout <vserver> <varname>
function vshelper.getSyncTimeout
{
    local _vgst_appdir _vgst_file _vgst_tmp
    _vgst_appdir=$($_VSERVER_INFO "$1" APPDIR vshelper) || _vgst_appdir=

    findFile _vgst_file ${_vgst_appdir:+"$_vgst_appdir"/sync-timeout} "$__CONFDIR"/.defaults/apps/vshelper/sync-timeout ''
    test -n "$_vgst_file" || return 1
    read _vgst_tmp <"$_vgst_file"
    eval $2=\$_vgst_tmp
}

function vshelper.initStopSync
{
	local _iss_sync_dir=$($_MKTEMPDIR vshelper-stop-sync.XXXXXX) || {
		warning $"Failed to generate directory for vshelper sync"
		exit 1
	}
	$_MKFIFO -m700 "$_iss_sync_dir/pipe"

	eval "$1"=\$_iss_sync_dir
	VSHELPER_STOP_SYNC="$_iss_sync_dir/pipe"
	export VSHELPER_STOP_SYNC
}

function vshelper.waitForStopSync
{
	local sync_dir=$1
	cat "$sync_dir/pipe" &> /dev/null
	rm -fr "$sync_dir"
}

function vshelper.doStopSync
{
	test ! -p "$VSHELPER_STOP_SYNC" || echo stopped > "$VSHELPER_STOP_SYNC"
}

function vshelper.isStopSync
{
	test -p "$VSHELPER_STOP_SYNC" || return 1
	return 0
}

function _rpmFake.getCapFlags
{
    local ctx=$1
    
    if test -n "$ctx" && ! $_VSERVER_INFO - FEATURE migrate; then
	set -- $($_CHCONTEXT_COMPAT --xid 1 \
	    $_SH -c "$_CAT /proc/[0-9]*/status | $_EGREP '^(CapBset|s_context|ctxflags)'" | \
	    $_GREP -B 1 -A 1 "^s_context: $ctx " | \
	    $_SED -e '1,3p;d' | $_AWK '{ print $2 }')
    else
	set --
    fi

    if test -n "$3"; then
	RPM_FAKE_CAP=$[ ~0x$1 ]
	RPM_FAKE_FLAGS=$3
    else
	RPM_FAKE_CAP=$[ ~0xd40c04ff ]
	RPM_FAKE_FLAGS=4
    fi
}

function rpmFake.init
{
    local vdir ctx
    
    vdir=$($_VSERVER_INFO "$1" VDIR)    || vdir="$1"
    ctx=$($_VSERVER_INFO  "$1" CONTEXT) || ctx=

    test -d "$vdir" ||
	panic $"Can not find chroot environment at '$vdir' for '$1'"

    _rpmFake.getCapFlags "$ctx"

    RPM_FAKE_CHROOT=$vdir
    RPM_FAKE_CTX=$ctx
}

function rpmFake.exec
{
    export RPM_FAKE_CHROOT RPM_FAKE_CTX RPM_FAKE_CAP RPM_FAKE_FLAGS
    
    LD_PRELOAD=$_RPM_FAKE_SO${LD_PRELOAD:+:$LD_PRELOAD} \
	exec "$@"
}
